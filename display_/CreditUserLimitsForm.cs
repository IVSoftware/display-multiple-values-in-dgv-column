using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcomboboxcolumn?view=windowsdesktop-6.0

namespace display_multiple_values_in_dgv_column
{
    public partial class CreditUserLimitsForm  : Form
    {
        public CreditUserLimitsForm () => InitializeComponent();
        readonly BindingList<CreditUser> CreditUsers = new BindingList<CreditUser>();
        protected override void OnLoad(EventArgs e)
        {
            try
            {
                dataGridViewCreditUser.DataSource = CreditUsers;
                // This will autogenerate columns
                foreach (var creditUser in mockMainForm_srv_GetCreditUser("", ""))
                {
                    CreditUsers.Add(creditUser);
                }
                dataGridViewCreditUser.Columns[nameof(CreditUser.UserName)].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                dataGridViewCreditUser.Columns[nameof(CreditUser.Restricted)].Width = 50;
                var colCB = new DataGridViewComboBoxColumn
                {
                    Name = nameof(CreditUser.CustomerType),
                    DataPropertyName = nameof(CreditUser.CustomerType),
                    HeaderText = "Customer Type",
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    DataSource = AllowedCustomerTypeForUser,
                };
                // Swap out the autogenerated column
                var index = dataGridViewCreditUser.Columns[nameof(CreditUser.CustomerType)].Index;
                dataGridViewCreditUser.Columns.RemoveAt(index);
                dataGridViewCreditUser.Columns.Insert(1, colCB);

                // Cancel the known exception caused by clearing the data source.
                dataGridViewCreditUser.DataError += (sender, e) =>
                {
                    // This transitory state is caused by AllowedCustomerTypeForUser.Clear();
                    e.Cancel = e.Exception.Message == "DataGridViewComboBoxCell value is not valid.";
                };

                // Assign allowed customer types when cell selection changes
                dataGridViewCreditUser.CurrentCellChanged += (sender, e) =>
                {
                    if(dataGridViewCreditUser.CurrentCell != null)
                    {
                        var creditUser = CreditUsers[dataGridViewCreditUser.CurrentCell.RowIndex];
                        var colCB = ((DataGridViewComboBoxColumn)dataGridViewCreditUser.Columns[nameof(CreditUser.CustomerType)]);
                        AllowedCustomerTypeForUser.Clear();
                        foreach (var allowedType in creditUser.AllowedCustomerTypes)
                        {
                            AllowedCustomerTypeForUser.Add(allowedType);
                        }
                    }
                };

                // Make sure the cell is NOT left in an editing
                // state after change of ComboBox or CheckBox.
                dataGridViewCreditUser.CurrentCellDirtyStateChanged += (sender, e) =>
                {
                    switch (dataGridViewCreditUser.Columns[dataGridViewCreditUser.CurrentCell.ColumnIndex].Name)
                    {
                        case nameof(CreditUser.CustomerType):
                        case nameof(CreditUser.Restricted):
                            dataGridViewCreditUser.CommitEdit(DataGridViewDataErrorContexts.Commit);
                            break;
                    }
                };
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
               //NutraMsg.DisplayError(this, ex, MainForm.GetMessageDisplayType());
            }
        }
        private readonly List<string> AllowedCustomerTypeForUser = new List<string>
        {
            "None",
            "Retail",
            "Consumer",
            "Banking",
            "Business"
        };

        // MOCK for minimal example
        private List<CreditUser> mockMainForm_srv_GetCreditUser(string v1, string v2)
        {
            return new List<CreditUser>
            {
                new CreditUser
                {
                    UserName = "Tom",
                    CreditLimit=10000m,
                    AllowedCustomerTypes = new List<string>{ "Retail", "Consumer"},
                },
                new CreditUser
                {
                    UserName = "Richard",
                    CreditLimit=1250m,
                    AllowedCustomerTypes = new List<string>{ "Banking", "Business"},
                },
                new CreditUser
                {
                    UserName = "Harry",
                    CreditLimit=10000m,
                    AllowedCustomerTypes = new List<string>{ "Retail", "Consumer", "Personal"},
                },
            };
        }
    }

    // REDUCED for minimal example
    public class CreditUser : INotifyPropertyChanged
    {
        string _UserName = string.Empty;
        public string UserName
        {
            get => _UserName;
            set
            {
                if (!Equals(_UserName, value))
                {
                    _UserName = value;
                    OnPropertyChanged();
                }
            }
        }

        bool _Restricted = false;
        public bool Restricted
        {
            get => _Restricted;
            set
            {
                if (!Equals(_Restricted, value))
                {
                    _Restricted = value;
                    OnPropertyChanged();
                }
            }
        }
        string _CustomerType = string.Empty;
        public string CustomerType
        {
            get => _CustomerType;
            set
            {
                if (!Equals(_CustomerType, value))
                {
                    _CustomerType = value;
                    OnPropertyChanged();
                }
            }
        }
        decimal _CreditLimit = 0;
        public decimal CreditLimit
        {
            get => _CreditLimit;
            set
            {
                if (!Equals(_CreditLimit, value))
                {
                    _CreditLimit = value;
                    OnPropertyChanged();
                }
            }
        }
        [Browsable(false)]
        public List<string> AllowedCustomerTypes { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged([CallerMemberName] string propertyName = null) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
